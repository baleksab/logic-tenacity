// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Server.Data;

#nullable disable

namespace Server.Migrations
{
    [DbContext(typeof(LogicTenacityDbContext))]
    partial class LogicTenacityDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.2");

            modelBuilder.Entity("Server.Models.File", b =>
                {
                    b.Property<int>("FileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("OriginalName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UploaderId")
                        .HasColumnType("INTEGER");

                    b.HasKey("FileId");

                    b.HasIndex("UploaderId");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("Server.Models.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AvatarId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Github")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Linkedin")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordToken")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("PasswordTokenExpiresAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("RefreshTokenExpiresAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AvatarId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("Members");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "",
                            Country = "",
                            DateAdded = new DateTime(2024, 6, 10, 2, 0, 26, 285, DateTimeKind.Local).AddTicks(1498),
                            DateOfBirth = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "admin@logictenacity.com",
                            FirstName = "Logic",
                            Github = "",
                            IsDisabled = false,
                            LastName = "Tenacity",
                            Linkedin = "",
                            Password = "$2a$10$X2iDQlyr7RMvV8p0/qtoIO4OmZ.X2FkGAQRvPHtHKXNg/MRMrzvVC",
                            PhoneNumber = "",
                            RoleId = 1,
                            Status = ""
                        },
                        new
                        {
                            Id = 2,
                            City = "",
                            Country = "",
                            DateAdded = new DateTime(2024, 6, 10, 2, 0, 26, 348, DateTimeKind.Local).AddTicks(1845),
                            DateOfBirth = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "pera@gmail.com",
                            FirstName = "Pera",
                            Github = "",
                            IsDisabled = false,
                            LastName = "Peric",
                            Linkedin = "",
                            Password = "$2a$10$an46hTSZFX5IXyJe2A.BJOkrkcq8amU807TBW3WkOLDZSYgB02kJq",
                            PhoneNumber = "",
                            RoleId = 2,
                            Status = ""
                        },
                        new
                        {
                            Id = 3,
                            City = "",
                            Country = "",
                            DateAdded = new DateTime(2024, 6, 10, 2, 0, 26, 412, DateTimeKind.Local).AddTicks(2283),
                            DateOfBirth = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "toma@gmail.com",
                            FirstName = "Toma",
                            Github = "",
                            IsDisabled = false,
                            LastName = "Tomic",
                            Linkedin = "",
                            Password = "$2a$10$Zu/JDRk6YNcBSpu.Ed5fCejwimgG02G8VC7.fE8NVLNwkgINfZQU.",
                            PhoneNumber = "",
                            RoleId = 3,
                            Status = ""
                        });
                });

            modelBuilder.Entity("Server.Models.MemberProject", b =>
                {
                    b.Property<int>("MemberId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProjectRoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("MemberId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ProjectRoleId");

                    b.ToTable("MemberProjects");
                });

            modelBuilder.Entity("Server.Models.MemberTask", b =>
                {
                    b.Property<int>("MemberId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TaskId")
                        .HasColumnType("INTEGER");

                    b.HasKey("MemberId", "TaskId");

                    b.HasIndex("TaskId");

                    b.ToTable("MemberTasks");
                });

            modelBuilder.Entity("Server.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRead")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MemberId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Server.Models.Permission", b =>
                {
                    b.Property<int>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("PermissionName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("PermissionId");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            PermissionId = 1,
                            PermissionName = "Change global role"
                        },
                        new
                        {
                            PermissionId = 2,
                            PermissionName = "Add member"
                        },
                        new
                        {
                            PermissionId = 3,
                            PermissionName = "Edit member"
                        },
                        new
                        {
                            PermissionId = 4,
                            PermissionName = "Deactivate member"
                        },
                        new
                        {
                            PermissionId = 5,
                            PermissionName = "Create project"
                        });
                });

            modelBuilder.Entity("Server.Models.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateFinished")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DeadlineModified")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProjectDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ProjectPriorityId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProjectStatusId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("TeamLeaderId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProjectId");

                    b.HasIndex("ProjectPriorityId");

                    b.HasIndex("ProjectStatusId");

                    b.HasIndex("TeamLeaderId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Server.Models.ProjectFile", b =>
                {
                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FileId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProjectId", "FileId");

                    b.HasIndex("FileId");

                    b.ToTable("ProjectFile");
                });

            modelBuilder.Entity("Server.Models.ProjectPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ProjectPermissions");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Name = "Change project role"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Delete project"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Add member to project"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Remove member from project"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Create task"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Delete task"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Add member to task"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Remove member from task"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Change project"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Change project status"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Change task status"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Change task priority"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Add task dependency"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Remove task dependency"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Add task category"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Change task"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Add task activity"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Remove task activity"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Comment task"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Change project priority"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Change task category"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Add task status"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Remove task status"
                        },
                        new
                        {
                            Id = 24,
                            Name = "Change deadline"
                        },
                        new
                        {
                            Id = 25,
                            Name = "Add file"
                        },
                        new
                        {
                            Id = 26,
                            Name = "Remove file"
                        },
                        new
                        {
                            Id = 27,
                            Name = "Assign task leader"
                        },
                        new
                        {
                            Id = 28,
                            Name = "Remove task leader"
                        },
                        new
                        {
                            Id = 29,
                            Name = "Delete task comment"
                        },
                        new
                        {
                            Id = 30,
                            Name = "Remove task category"
                        });
                });

            modelBuilder.Entity("Server.Models.ProjectPriority", b =>
                {
                    b.Property<int>("ProjectPriorityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PriorityColorHex")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ProjectPriorityId");

                    b.ToTable("ProjectPriorities");

                    b.HasData(
                        new
                        {
                            ProjectPriorityId = 1,
                            Name = "Low",
                            PriorityColorHex = "#00FF00"
                        },
                        new
                        {
                            ProjectPriorityId = 2,
                            Name = "Medium",
                            PriorityColorHex = "#FFFF00"
                        },
                        new
                        {
                            ProjectPriorityId = 3,
                            Name = "High",
                            PriorityColorHex = "#FF0000"
                        });
                });

            modelBuilder.Entity("Server.Models.ProjectProjectRole", b =>
                {
                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProjectRoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProjectId", "ProjectRoleId");

                    b.HasIndex("ProjectRoleId");

                    b.ToTable("ProjectProjectRoles");
                });

            modelBuilder.Entity("Server.Models.ProjectRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsFallback")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ProjectRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDefault = true,
                            IsFallback = false,
                            Name = "Project Leader"
                        },
                        new
                        {
                            Id = 2,
                            IsDefault = true,
                            IsFallback = false,
                            Name = "Project Assignee"
                        },
                        new
                        {
                            Id = 3,
                            IsDefault = true,
                            IsFallback = true,
                            Name = "Project Guest"
                        });
                });

            modelBuilder.Entity("Server.Models.ProjectRolePermission", b =>
                {
                    b.Property<int>("ProjectRoleId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProjectPermissionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProjectRoleId", "ProjectPermissionId");

                    b.HasIndex("ProjectPermissionId");

                    b.ToTable("ProjectRolePermissions");

                    b.HasData(
                        new
                        {
                            ProjectRoleId = 1,
                            ProjectPermissionId = -1
                        },
                        new
                        {
                            ProjectRoleId = 1,
                            ProjectPermissionId = 1
                        },
                        new
                        {
                            ProjectRoleId = 1,
                            ProjectPermissionId = 2
                        },
                        new
                        {
                            ProjectRoleId = 1,
                            ProjectPermissionId = 3
                        },
                        new
                        {
                            ProjectRoleId = 1,
                            ProjectPermissionId = 4
                        },
                        new
                        {
                            ProjectRoleId = 1,
                            ProjectPermissionId = 5
                        },
                        new
                        {
                            ProjectRoleId = 1,
                            ProjectPermissionId = 6
                        },
                        new
                        {
                            ProjectRoleId = 1,
                            ProjectPermissionId = 7
                        },
                        new
                        {
                            ProjectRoleId = 1,
                            ProjectPermissionId = 8
                        },
                        new
                        {
                            ProjectRoleId = 1,
                            ProjectPermissionId = 9
                        },
                        new
                        {
                            ProjectRoleId = 1,
                            ProjectPermissionId = 10
                        },
                        new
                        {
                            ProjectRoleId = 1,
                            ProjectPermissionId = 11
                        },
                        new
                        {
                            ProjectRoleId = 1,
                            ProjectPermissionId = 12
                        },
                        new
                        {
                            ProjectRoleId = 1,
                            ProjectPermissionId = 13
                        },
                        new
                        {
                            ProjectRoleId = 1,
                            ProjectPermissionId = 14
                        },
                        new
                        {
                            ProjectRoleId = 1,
                            ProjectPermissionId = 16
                        },
                        new
                        {
                            ProjectRoleId = 1,
                            ProjectPermissionId = 17
                        },
                        new
                        {
                            ProjectRoleId = 1,
                            ProjectPermissionId = 18
                        },
                        new
                        {
                            ProjectRoleId = 1,
                            ProjectPermissionId = 19
                        },
                        new
                        {
                            ProjectRoleId = 1,
                            ProjectPermissionId = 20
                        },
                        new
                        {
                            ProjectRoleId = 1,
                            ProjectPermissionId = 21
                        },
                        new
                        {
                            ProjectRoleId = 1,
                            ProjectPermissionId = 22
                        },
                        new
                        {
                            ProjectRoleId = 1,
                            ProjectPermissionId = 23
                        },
                        new
                        {
                            ProjectRoleId = 1,
                            ProjectPermissionId = 24
                        },
                        new
                        {
                            ProjectRoleId = 1,
                            ProjectPermissionId = 25
                        },
                        new
                        {
                            ProjectRoleId = 1,
                            ProjectPermissionId = 26
                        },
                        new
                        {
                            ProjectRoleId = 2,
                            ProjectPermissionId = 10
                        },
                        new
                        {
                            ProjectRoleId = 2,
                            ProjectPermissionId = 17
                        },
                        new
                        {
                            ProjectRoleId = 2,
                            ProjectPermissionId = 19
                        },
                        new
                        {
                            ProjectRoleId = 2,
                            ProjectPermissionId = 25
                        },
                        new
                        {
                            ProjectRoleId = 2,
                            ProjectPermissionId = 26
                        },
                        new
                        {
                            ProjectRoleId = 1,
                            ProjectPermissionId = 27
                        },
                        new
                        {
                            ProjectRoleId = 1,
                            ProjectPermissionId = 28
                        },
                        new
                        {
                            ProjectRoleId = 1,
                            ProjectPermissionId = 29
                        },
                        new
                        {
                            ProjectRoleId = 2,
                            ProjectPermissionId = 29
                        },
                        new
                        {
                            ProjectRoleId = 1,
                            ProjectPermissionId = 30
                        });
                });

            modelBuilder.Entity("Server.Models.ProjectStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ProjectStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Status = "In Preparation"
                        },
                        new
                        {
                            Id = 2,
                            Status = "In Progress"
                        },
                        new
                        {
                            Id = 3,
                            Status = "Closed"
                        });
                });

            modelBuilder.Entity("Server.Models.ProjectTask", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateFinished")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DeadlineModified")
                        .HasColumnType("TEXT");

                    b.Property<int>("PercentageComplete")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("TaskCategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TaskDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TaskLeaderId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TaskPriorityId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TaskStatusId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TaskId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("TaskCategoryId");

                    b.HasIndex("TaskLeaderId");

                    b.HasIndex("TaskPriorityId");

                    b.HasIndex("TaskStatusId");

                    b.ToTable("ProjectTasks");
                });

            modelBuilder.Entity("Server.Models.ProjectTaskCategories", b =>
                {
                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TaskCategoryId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProjectId", "TaskCategoryId");

                    b.HasIndex("TaskCategoryId");

                    b.ToTable("ProjectTaskCategories");
                });

            modelBuilder.Entity("Server.Models.ProjectTaskStatus", b =>
                {
                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TaskStatusId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProjectId", "TaskStatusId");

                    b.HasIndex("TaskStatusId");

                    b.ToTable("ProjectTaskStatuses");
                });

            modelBuilder.Entity("Server.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsFallback")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("RoleId");

                    b.HasIndex("RoleName")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            IsDefault = true,
                            IsFallback = false,
                            RoleName = "Administrator"
                        },
                        new
                        {
                            RoleId = 2,
                            IsDefault = true,
                            IsFallback = false,
                            RoleName = "Project Manager"
                        },
                        new
                        {
                            RoleId = 3,
                            IsDefault = true,
                            IsFallback = true,
                            RoleName = "Worker"
                        });
                });

            modelBuilder.Entity("Server.Models.RolePermission", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PermissionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermissions");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            PermissionId = 1
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 2
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 3
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 4
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 5
                        });
                });

            modelBuilder.Entity("Server.Models.TaskActivity", b =>
                {
                    b.Property<int>("TaskActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ActivityDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("MemberId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PercentageComplete")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProjectTaskId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TaskActivityTypeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TaskActivityId");

                    b.HasIndex("MemberId");

                    b.HasIndex("ProjectTaskId");

                    b.HasIndex("TaskActivityTypeId");

                    b.ToTable("TaskActivities");
                });

            modelBuilder.Entity("Server.Models.TaskActivityType", b =>
                {
                    b.Property<int>("TaskActivityTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("TaskActivityName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("TaskActivityTypeId");

                    b.ToTable("TaskActivityTypes");

                    b.HasData(
                        new
                        {
                            TaskActivityTypeId = 1,
                            TaskActivityName = "Review"
                        },
                        new
                        {
                            TaskActivityTypeId = 2,
                            TaskActivityName = "Update"
                        },
                        new
                        {
                            TaskActivityTypeId = 3,
                            TaskActivityName = "Bug fix"
                        });
                });

            modelBuilder.Entity("Server.Models.TaskCategory", b =>
                {
                    b.Property<int>("TaskCategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("INTEGER");

                    b.HasKey("TaskCategoryID");

                    b.ToTable("TaskCategories");

                    b.HasData(
                        new
                        {
                            TaskCategoryID = 1,
                            CategoryName = "Uncategorized",
                            IsDefault = true
                        });
                });

            modelBuilder.Entity("Server.Models.TaskComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("MemberId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MemberTaskId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TaskId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskComments");
                });

            modelBuilder.Entity("Server.Models.TaskDependency", b =>
                {
                    b.Property<int>("TaskId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DependentTaskId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TaskId", "DependentTaskId");

                    b.HasIndex("DependentTaskId");

                    b.ToTable("TaskDependencies");
                });

            modelBuilder.Entity("Server.Models.TaskFile", b =>
                {
                    b.Property<int>("TaskId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FileId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TaskId", "FileId");

                    b.HasIndex("FileId");

                    b.ToTable("TaskFile");
                });

            modelBuilder.Entity("Server.Models.TaskPriority", b =>
                {
                    b.Property<int>("TaskPriorityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PriorityColorHex")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("TaskPriorityId");

                    b.ToTable("TaskPriority");

                    b.HasData(
                        new
                        {
                            TaskPriorityId = 1,
                            Name = "Low",
                            PriorityColorHex = "#00FF00"
                        },
                        new
                        {
                            TaskPriorityId = 2,
                            Name = "Medium",
                            PriorityColorHex = "#FFFF00"
                        },
                        new
                        {
                            TaskPriorityId = 3,
                            Name = "High",
                            PriorityColorHex = "#FF0000"
                        });
                });

            modelBuilder.Entity("Server.Models.TaskStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TaskStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDefault = true,
                            Name = "New"
                        },
                        new
                        {
                            Id = 2,
                            IsDefault = true,
                            Name = "In Progress"
                        },
                        new
                        {
                            Id = 3,
                            IsDefault = true,
                            Name = "Completed"
                        });
                });

            modelBuilder.Entity("Server.Models.File", b =>
                {
                    b.HasOne("Server.Models.Member", "Uploader")
                        .WithMany("UploadedFiles")
                        .HasForeignKey("UploaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Uploader");
                });

            modelBuilder.Entity("Server.Models.Member", b =>
                {
                    b.HasOne("Server.Models.File", "Avatar")
                        .WithMany()
                        .HasForeignKey("AvatarId");

                    b.HasOne("Server.Models.Role", "Role")
                        .WithMany("Members")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Avatar");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Server.Models.MemberProject", b =>
                {
                    b.HasOne("Server.Models.Member", "Member")
                        .WithMany("MemberProjects")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Models.Project", "Project")
                        .WithMany("MemberProjects")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Models.ProjectRole", "ProjectRole")
                        .WithMany()
                        .HasForeignKey("ProjectRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Project");

                    b.Navigation("ProjectRole");
                });

            modelBuilder.Entity("Server.Models.MemberTask", b =>
                {
                    b.HasOne("Server.Models.Member", "Member")
                        .WithMany("Tasks")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Models.ProjectTask", "Task")
                        .WithMany("Members")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("Server.Models.Notification", b =>
                {
                    b.HasOne("Server.Models.Member", "Member")
                        .WithMany("Notifications")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Server.Models.Project", b =>
                {
                    b.HasOne("Server.Models.ProjectPriority", "Priority")
                        .WithMany("Projects")
                        .HasForeignKey("ProjectPriorityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Models.ProjectStatus", "ProjectStatus")
                        .WithMany("Projects")
                        .HasForeignKey("ProjectStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Models.Member", "TeamLeader")
                        .WithMany("ProjectsLead")
                        .HasForeignKey("TeamLeaderId");

                    b.Navigation("Priority");

                    b.Navigation("ProjectStatus");

                    b.Navigation("TeamLeader");
                });

            modelBuilder.Entity("Server.Models.ProjectFile", b =>
                {
                    b.HasOne("Server.Models.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Models.Project", "Project")
                        .WithMany("ProjectFiles")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Server.Models.ProjectProjectRole", b =>
                {
                    b.HasOne("Server.Models.Project", "Project")
                        .WithMany("ProjectProjectRoles")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Models.ProjectRole", "ProjectRole")
                        .WithMany("ProjectProjectRoles")
                        .HasForeignKey("ProjectRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("ProjectRole");
                });

            modelBuilder.Entity("Server.Models.ProjectRolePermission", b =>
                {
                    b.HasOne("Server.Models.ProjectPermission", "ProjectPermission")
                        .WithMany("ProjectRolePermissions")
                        .HasForeignKey("ProjectPermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Models.ProjectRole", "ProjectRole")
                        .WithMany("ProjectRolePermissions")
                        .HasForeignKey("ProjectRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectPermission");

                    b.Navigation("ProjectRole");
                });

            modelBuilder.Entity("Server.Models.ProjectTask", b =>
                {
                    b.HasOne("Server.Models.Project", "Project")
                        .WithMany("ProjectTasks")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Models.TaskCategory", "TaskCategory")
                        .WithMany("ProjectTasks")
                        .HasForeignKey("TaskCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Models.Member", "TaskLeader")
                        .WithMany("TasksLead")
                        .HasForeignKey("TaskLeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Models.TaskPriority", "TaskPriority")
                        .WithMany("ProjectTasks")
                        .HasForeignKey("TaskPriorityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Models.TaskStatus", "TaskStatus")
                        .WithMany("ProjectTasks")
                        .HasForeignKey("TaskStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("TaskCategory");

                    b.Navigation("TaskLeader");

                    b.Navigation("TaskPriority");

                    b.Navigation("TaskStatus");
                });

            modelBuilder.Entity("Server.Models.ProjectTaskCategories", b =>
                {
                    b.HasOne("Server.Models.Project", "Project")
                        .WithMany("ProjectTaskCategories")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Models.TaskCategory", "TaskCategory")
                        .WithMany("ProjectTaskCategories")
                        .HasForeignKey("TaskCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("TaskCategory");
                });

            modelBuilder.Entity("Server.Models.ProjectTaskStatus", b =>
                {
                    b.HasOne("Server.Models.Project", "Project")
                        .WithMany("ProjectTaskStatuses")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Models.TaskStatus", "TaskStatus")
                        .WithMany("ProjectTaskStatuses")
                        .HasForeignKey("TaskStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("TaskStatus");
                });

            modelBuilder.Entity("Server.Models.RolePermission", b =>
                {
                    b.HasOne("Server.Models.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Models.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Server.Models.TaskActivity", b =>
                {
                    b.HasOne("Server.Models.Member", "Member")
                        .WithMany("TaskActivities")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Models.ProjectTask", "ProjectTask")
                        .WithMany("TaskActivities")
                        .HasForeignKey("ProjectTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Models.TaskActivityType", "TaskActivityType")
                        .WithMany("TaskActivities")
                        .HasForeignKey("TaskActivityTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("ProjectTask");

                    b.Navigation("TaskActivityType");
                });

            modelBuilder.Entity("Server.Models.TaskComment", b =>
                {
                    b.HasOne("Server.Models.Member", "Member")
                        .WithMany("TaskComments")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Models.ProjectTask", "Task")
                        .WithMany("TaskComment")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("Server.Models.TaskDependency", b =>
                {
                    b.HasOne("Server.Models.ProjectTask", "DependentTask")
                        .WithMany("DependentTasks")
                        .HasForeignKey("DependentTaskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Server.Models.ProjectTask", "Task")
                        .WithMany("Dependencies")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DependentTask");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("Server.Models.TaskFile", b =>
                {
                    b.HasOne("Server.Models.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Models.ProjectTask", "ProjectTask")
                        .WithMany("TaskFiles")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");

                    b.Navigation("ProjectTask");
                });

            modelBuilder.Entity("Server.Models.Member", b =>
                {
                    b.Navigation("MemberProjects");

                    b.Navigation("Notifications");

                    b.Navigation("ProjectsLead");

                    b.Navigation("TaskActivities");

                    b.Navigation("TaskComments");

                    b.Navigation("Tasks");

                    b.Navigation("TasksLead");

                    b.Navigation("UploadedFiles");
                });

            modelBuilder.Entity("Server.Models.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("Server.Models.Project", b =>
                {
                    b.Navigation("MemberProjects");

                    b.Navigation("ProjectFiles");

                    b.Navigation("ProjectProjectRoles");

                    b.Navigation("ProjectTaskCategories");

                    b.Navigation("ProjectTaskStatuses");

                    b.Navigation("ProjectTasks");
                });

            modelBuilder.Entity("Server.Models.ProjectPermission", b =>
                {
                    b.Navigation("ProjectRolePermissions");
                });

            modelBuilder.Entity("Server.Models.ProjectPriority", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("Server.Models.ProjectRole", b =>
                {
                    b.Navigation("ProjectProjectRoles");

                    b.Navigation("ProjectRolePermissions");
                });

            modelBuilder.Entity("Server.Models.ProjectStatus", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("Server.Models.ProjectTask", b =>
                {
                    b.Navigation("Dependencies");

                    b.Navigation("DependentTasks");

                    b.Navigation("Members");

                    b.Navigation("TaskActivities");

                    b.Navigation("TaskComment");

                    b.Navigation("TaskFiles");
                });

            modelBuilder.Entity("Server.Models.Role", b =>
                {
                    b.Navigation("Members");

                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("Server.Models.TaskActivityType", b =>
                {
                    b.Navigation("TaskActivities");
                });

            modelBuilder.Entity("Server.Models.TaskCategory", b =>
                {
                    b.Navigation("ProjectTaskCategories");

                    b.Navigation("ProjectTasks");
                });

            modelBuilder.Entity("Server.Models.TaskPriority", b =>
                {
                    b.Navigation("ProjectTasks");
                });

            modelBuilder.Entity("Server.Models.TaskStatus", b =>
                {
                    b.Navigation("ProjectTaskStatuses");

                    b.Navigation("ProjectTasks");
                });
#pragma warning restore 612, 618
        }
    }
}
